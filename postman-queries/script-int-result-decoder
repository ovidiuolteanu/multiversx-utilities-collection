function h2d(s) {

    function add(x, y) {
        var c = 0, r = [];
        var x = x.split('').map(Number);
        var y = y.split('').map(Number);
        while(x.length || y.length) {
            var s = (x.pop() || 0) + (y.pop() || 0) + c;
            r.unshift(s < 10 ? s : s - 10); 
            c = s < 10 ? 0 : 1;
        }
        if(c) r.unshift(c);
        return r.join('');
    }

    var dec = '0';
    s.split('').forEach(function(chr) {
        var n = parseInt(chr, 16);
        for(var t = 8; t; t >>= 1) {
            dec = add(dec, dec);
            if(n & t) dec = add(dec, '1');
        }
    });
    return dec;
}

pm.test("decoded base64", function () {
    var crypto = require("crypto-js")
    var jsonData = pm.response.json();
    var encoded = jsonData.data.data.returnData
    console.log(encoded);
    if(!encoded.length > 0) {
        pm.test("FAIL", () => {throw new Error("return is empty !!")})
    } else {
        try {
            encoded.map(elem => {
                console.log({elem})
                let hex = Buffer.from(elem, 'base64').toString("hex");
                console.log({hex})
                let decimal = hex.toString(10);
                console.log({decimal})
                dec = h2d(hex)
                console.log({dec})
                pm.test(hex,function(){});
                pm.test(dec,function(){});
            })
        }catch(e){
            pm.test("FAIL", () => {throw new Error("Malformed return data, please verify the results.")});
            console.log(e);
        }
    }
});
