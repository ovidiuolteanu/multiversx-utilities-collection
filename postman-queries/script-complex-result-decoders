function h2d(s) {

    function add(x, y) {
        var c = 0, r = [];
        var x = x.split('').map(Number);
        var y = y.split('').map(Number);
        while(x.length || y.length) {
            var s = (x.pop() || 0) + (y.pop() || 0) + c;
            r.unshift(s < 10 ? s : s - 10); 
            c = s < 10 ? 0 : 1;
        }
        if(c) r.unshift(c);
        return r.join('');
    }

    var dec = '0';
    s.split('').forEach(function(chr) {
        var n = parseInt(chr, 16);
        for(var t = 8; t; t >>= 1) {
            dec = add(dec, dec);
            if(n & t) dec = add(dec, '1');
        }
    });
    return dec;
}

function hex2a(hexx) {
    var hex = hexx.toString();//force conversion
    var str = '';
    for (var i = 0; i < hex.length; i += 2)
        str += String.fromCharCode(parseInt(hex.substr(i, 2), 16));
    return str;
}

function decode_structure(attributes_hex, decode_struct) {
    function slide_indexes(j, no_bytes) {
        var index_f = j;
        var index_l = j + (no_bytes * 2);
        return [index_f, index_l];
    }

    function fixed_length_primitive(attributes, start_index, primitive_len) {
        var [index_first, index_last] = slide_indexes(start_index, primitive_len);
        var result_hex = attributes.slice(index_first, index_last);
        var result_int = h2d(result_hex);
        return [result_int, result_hex, index_last];
    }

    function u8(attributes, start_index) {
        let [result, _, index] = fixed_length_primitive(attributes, start_index, 1);
        return [result, index];
    }

    function u16(attributes, start_index) {
        let [result, _, index] = fixed_length_primitive(attributes, start_index, 2);
        return [result, index];
    }

    function u32(attributes, start_index) {
        let [result, _, index] = fixed_length_primitive(attributes, start_index, 4);
        return [result, index];
    }

    function u64(attributes, start_index) {
        let [result, _, index] = fixed_length_primitive(attributes, start_index, 8);
        return [result, index];
    }

    function biguint(attributes, start_index) {
        var [payload_size, _, index] = fixed_length_primitive(attributes, start_index, 4);
        var result = 0;
        if (payload_size)
            var [result, _, index] = fixed_length_primitive(attributes, index, payload_size);
        return [result, index];
    }

    function string(attributes, start_index) {
        var [payload_size, _, index] = fixed_length_primitive(attributes, start_index, 4);
        var result_string = "";
        if (payload_size)
            var [_, result, index] = fixed_length_primitive(attributes, index, payload_size);
            result_string = hex2a(result);
        return [result_string, index];
    }

    var results_dict = {};
    var sliding_index = 0;
    var implemented_primitives = {'u8': u8,
                              'u16': u16,
                              'u32': u32,
                              'u64': u64,
                              'biguint': biguint,
                              'string': string};
    for (const [key, primitive] of Object.entries(decode_struct)) {
        if (primitive in implemented_primitives) {
            var [decoded_result, sliding_index] = implemented_primitives[primitive](attributes_hex, sliding_index)
            results_dict[key] = decoded_result
        }
    }

    return results_dict
}

function decode(s) {

    var data_structure_format = {
        "unlock_epoch": "u64",
        "locked_token_id": "string",
        "locked_token_nonce": "u64",
        "locked_token_amount": "biguint",
        "unlocked_token_id": "string",
        "unlocked_token_nonce": "u64",
        "unlocked_token_amount": "biguint"
    }

    var decoded_result = decode_structure(s, data_structure_format);
    return decoded_result;
}

pm.test("Retrieve struct data", function () {
    var jsonData = pm.response.json();
    var encoded = jsonData.data.data.returnData
    console.log(encoded);
    if(!encoded.length > 0) {
        pm.test("FAIL", () => {throw new Error("return is empty !!")})
    } else {
        try {
            encoded.map(elem => {
                console.log({elem})
                let hex = Buffer.from(elem, 'base64').toString("hex");
                console.log({hex})
                // let decimal = hex.toString(10);
                // console.log({decimal})
                let decoded = decode(hex)
                console.log(decoded);

                // show results in Test Results tab
                pm.test("Hex result: ".concat(hex), function(){});
                for (const [key, primitive] of Object.entries(decoded)) {
                    pm.test(key.concat(": ", primitive.toString()), function(){});
                }
            })
        }catch(e){
            pm.test("FAIL", () => {throw new Error("Malformed return data, please verify the results.")});
            console.log(e);
        }
    }
});
